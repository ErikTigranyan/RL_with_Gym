{
    "policy_class": {
        ":type:": "<class 'abc.ABCMeta'>",
        ":serialized:": "gAWVMAAAAAAAAACMHnN0YWJsZV9iYXNlbGluZXMzLnNhYy5wb2xpY2llc5SMCVNBQ1BvbGljeZSTlC4=",
        "__module__": "stable_baselines3.sac.policies",
        "__annotations__": "{'actor': <class 'stable_baselines3.sac.policies.Actor'>, 'critic': <class 'stable_baselines3.common.policies.ContinuousCritic'>, 'critic_target': <class 'stable_baselines3.common.policies.ContinuousCritic'>}",
        "__doc__": "\n    Policy class (with both actor and critic) for SAC.\n\n    :param observation_space: Observation space\n    :param action_space: Action space\n    :param lr_schedule: Learning rate schedule (could be constant)\n    :param net_arch: The specification of the policy and value networks.\n    :param activation_fn: Activation function\n    :param use_sde: Whether to use State Dependent Exploration or not\n    :param log_std_init: Initial value for the log standard deviation\n    :param use_expln: Use ``expln()`` function instead of ``exp()`` when using gSDE to ensure\n        a positive standard deviation (cf paper). It allows to keep variance\n        above zero and prevent it from growing too fast. In practice, ``exp()`` is usually enough.\n    :param clip_mean: Clip the mean output when using gSDE to avoid numerical instability.\n    :param features_extractor_class: Features extractor to use.\n    :param features_extractor_kwargs: Keyword arguments\n        to pass to the features extractor.\n    :param normalize_images: Whether to normalize images or not,\n         dividing by 255.0 (True by default)\n    :param optimizer_class: The optimizer to use,\n        ``th.optim.Adam`` by default\n    :param optimizer_kwargs: Additional keyword arguments,\n        excluding the learning rate, to pass to the optimizer\n    :param n_critics: Number of critic networks to create.\n    :param share_features_extractor: Whether to share or not the features extractor\n        between the actor and the critic (this saves computation time)\n    ",
        "__init__": "<function SACPolicy.__init__ at 0x7f7708074dc0>",
        "_build": "<function SACPolicy._build at 0x7f7708074e50>",
        "_get_constructor_parameters": "<function SACPolicy._get_constructor_parameters at 0x7f7708074ee0>",
        "reset_noise": "<function SACPolicy.reset_noise at 0x7f7708074f70>",
        "make_actor": "<function SACPolicy.make_actor at 0x7f7708075000>",
        "make_critic": "<function SACPolicy.make_critic at 0x7f7708075090>",
        "forward": "<function SACPolicy.forward at 0x7f7708075120>",
        "_predict": "<function SACPolicy._predict at 0x7f77080751b0>",
        "set_training_mode": "<function SACPolicy.set_training_mode at 0x7f7708075240>",
        "__abstractmethods__": "frozenset()",
        "_abc_impl": "<_abc._abc_data object at 0x7f770806fd00>"
    },
    "verbose": 1,
    "policy_kwargs": {
        "use_sde": false
    },
    "num_timesteps": 1000000,
    "_total_timesteps": 1000000,
    "_num_timesteps_at_start": 0,
    "seed": null,
    "action_noise": null,
    "start_time": 1745062540682027139,
    "learning_rate": 0.0003,
    "tensorboard_log": "./tensorboard_logs/",
    "_last_obs": {
        ":type:": "<class 'numpy.ndarray'>",
        ":serialized:": ""
    },
    "_last_episode_starts": {
        ":type:": "<class 'numpy.ndarray'>",
        ":serialized:": "gAWVdwAAAAAAAACMEm51bXB5LmNvcmUubnVtZXJpY5SMC19mcm9tYnVmZmVylJOUKJYEAAAAAAAAAAEBAQGUjAVudW1weZSMBWR0eXBllJOUjAJiMZSJiIeUUpQoSwOMAXyUTk5OSv////9K/////0sAdJRiSwSFlIwBQ5R0lFKULg=="
    },
    "_last_original_obs": {
        ":type:": "<class 'numpy.ndarray'>",
        ":serialized:": ""
    },
    "_episode_num": 2876,
    "use_sde": false,
    "sde_sample_freq": -1,
    "_current_progress_remaining": 0.0,
    "_stats_window_size": 100,
    "ep_info_buffer": {
        ":type:": "<class 'collections.deque'>",
        ":serialized:": "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"
    },
    "ep_success_buffer": {
        ":type:": "<class 'collections.deque'>",
        ":serialized:": "gAWVIAAAAAAAAACMC2NvbGxlY3Rpb25zlIwFZGVxdWWUk5QpS2SGlFKULg=="
    },
    "_n_updates": 249975,
    "observation_space": {
        ":type:": "<class 'gymnasium.spaces.box.Box'>",
        ":serialized:": "",
        "dtype": "float64",
        "_shape": [
            376
        ],
        "low": "[-inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf\n -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf -inf]",
        "bounded_below": "[False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False]",
        "high": "[inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf\n inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf inf]",
        "bounded_above": "[False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False False False False False False False False False\n False False False False]",
        "low_repr": "-inf",
        "high_repr": "inf",
        "_np_random": null
    },
    "action_space": {
        ":type:": "<class 'gymnasium.spaces.box.Box'>",
        ":serialized:": "gAWV0QIAAAAAAACMFGd5bW5hc2l1bS5zcGFjZXMuYm94lIwDQm94lJOUKYGUfZQojAVkdHlwZZSMBW51bXB5lIwFZHR5cGWUk5SMAmY0lImIh5RSlChLA4wBPJROTk5K/////0r/////SwB0lGKMBl9zaGFwZZRLEYWUjANsb3eUjBJudW1weS5jb3JlLm51bWVyaWOUjAtfZnJvbWJ1ZmZlcpSTlCiWRAAAAAAAAADNzMy+zczMvs3MzL7NzMy+zczMvs3MzL7NzMy+zczMvs3MzL7NzMy+zczMvs3MzL7NzMy+zczMvs3MzL7NzMy+zczMvpRoC0sRhZSMAUOUdJRSlIwNYm91bmRlZF9iZWxvd5RoEyiWEQAAAAAAAAABAQEBAQEBAQEBAQEBAQEBAZRoCIwCYjGUiYiHlFKUKEsDjAF8lE5OTkr/////Sv////9LAHSUYksRhZRoFnSUUpSMBGhpZ2iUaBMolkQAAAAAAAAAzczMPs3MzD7NzMw+zczMPs3MzD7NzMw+zczMPs3MzD7NzMw+zczMPs3MzD7NzMw+zczMPs3MzD7NzMw+zczMPs3MzD6UaAtLEYWUaBZ0lFKUjA1ib3VuZGVkX2Fib3ZllGgTKJYRAAAAAAAAAAEBAQEBAQEBAQEBAQEBAQEBlGgdSxGFlGgWdJRSlIwIbG93X3JlcHKUjAQtMC40lIwJaGlnaF9yZXBylIwDMC40lIwKX25wX3JhbmRvbZSMFG51bXB5LnJhbmRvbS5fcGlja2xllIwQX19nZW5lcmF0b3JfY3RvcpSTlIwFUENHNjSUhZRSlH2UKIwNYml0X2dlbmVyYXRvcpSMBVBDRzY0lIwFc3RhdGWUfZQoaDuKEFoMMp0ZRbK987LW+UJamReMA2luY5SKEBMHLwwO5ceuebArffIX5AZ1jApoYXNfdWludDMylEsAjAh1aW50ZWdlcpRLAHVidWIu",
        "dtype": "float32",
        "_shape": [
            17
        ],
        "low": "[-0.4 -0.4 -0.4 -0.4 -0.4 -0.4 -0.4 -0.4 -0.4 -0.4 -0.4 -0.4 -0.4 -0.4\n -0.4 -0.4 -0.4]",
        "bounded_below": "[ True  True  True  True  True  True  True  True  True  True  True  True\n  True  True  True  True  True]",
        "high": "[0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4]",
        "bounded_above": "[ True  True  True  True  True  True  True  True  True  True  True  True\n  True  True  True  True  True]",
        "low_repr": "-0.4",
        "high_repr": "0.4",
        "_np_random": "Generator(PCG64)"
    },
    "n_envs": 4,
    "buffer_size": 1000000,
    "batch_size": 256,
    "learning_starts": 100,
    "tau": 0.005,
    "gamma": 0.99,
    "gradient_steps": 1,
    "optimize_memory_usage": false,
    "replay_buffer_class": {
        ":type:": "<class 'abc.ABCMeta'>",
        ":serialized:": "gAWVNQAAAAAAAACMIHN0YWJsZV9iYXNlbGluZXMzLmNvbW1vbi5idWZmZXJzlIwMUmVwbGF5QnVmZmVylJOULg==",
        "__module__": "stable_baselines3.common.buffers",
        "__annotations__": "{'observations': <class 'numpy.ndarray'>, 'next_observations': <class 'numpy.ndarray'>, 'actions': <class 'numpy.ndarray'>, 'rewards': <class 'numpy.ndarray'>, 'dones': <class 'numpy.ndarray'>, 'timeouts': <class 'numpy.ndarray'>}",
        "__doc__": "\n    Replay buffer used in off-policy algorithms like SAC/TD3.\n\n    :param buffer_size: Max number of element in the buffer\n    :param observation_space: Observation space\n    :param action_space: Action space\n    :param device: PyTorch device\n    :param n_envs: Number of parallel environments\n    :param optimize_memory_usage: Enable a memory efficient variant\n        of the replay buffer which reduces by almost a factor two the memory used,\n        at a cost of more complexity.\n        See https://github.com/DLR-RM/stable-baselines3/issues/37#issuecomment-637501195\n        and https://github.com/DLR-RM/stable-baselines3/pull/28#issuecomment-637559274\n        Cannot be used in combination with handle_timeout_termination.\n    :param handle_timeout_termination: Handle timeout termination (due to timelimit)\n        separately and treat the task as infinite horizon task.\n        https://github.com/DLR-RM/stable-baselines3/issues/284\n    ",
        "__init__": "<function ReplayBuffer.__init__ at 0x7f77081dc160>",
        "add": "<function ReplayBuffer.add at 0x7f77081dc1f0>",
        "sample": "<function ReplayBuffer.sample at 0x7f77081dc280>",
        "_get_samples": "<function ReplayBuffer._get_samples at 0x7f77081dc310>",
        "_maybe_cast_dtype": "<staticmethod(<function ReplayBuffer._maybe_cast_dtype at 0x7f77081dc3a0>)>",
        "__abstractmethods__": "frozenset()",
        "_abc_impl": "<_abc._abc_data object at 0x7f770897a8c0>"
    },
    "replay_buffer_kwargs": {},
    "train_freq": {
        ":type:": "<class 'stable_baselines3.common.type_aliases.TrainFreq'>",
        ":serialized:": "gAWVYQAAAAAAAACMJXN0YWJsZV9iYXNlbGluZXMzLmNvbW1vbi50eXBlX2FsaWFzZXOUjAlUcmFpbkZyZXGUk5RLAWgAjBJUcmFpbkZyZXF1ZW5jeVVuaXSUk5SMBHN0ZXCUhZRSlIaUgZQu"
    },
    "use_sde_at_warmup": false,
    "target_entropy": -17.0,
    "ent_coef": "auto",
    "target_update_interval": 1,
    "lr_schedule": {
        ":type:": "<class 'function'>",
        ":serialized:": "gAWV2QMAAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwOX21ha2VfZnVuY3Rpb26Uk5QoaACMDV9idWlsdGluX3R5cGWUk5SMCENvZGVUeXBllIWUUpQoSwFLAEsASwFLA0sTQwx0AIgAfACDAYMBUwCUToWUjAVmbG9hdJSFlIwScHJvZ3Jlc3NfcmVtYWluaW5nlIWUjG0vaG9tZS9tb29uM2ZpcmUvUHl0aG9uLTMuMTAuMC9wcm9qZWN0L2d5bV92ZW52L2xpYi9weXRob24zLjEwL3NpdGUtcGFja2FnZXMvc3RhYmxlX2Jhc2VsaW5lczMvY29tbW9uL3V0aWxzLnB5lIwIPGxhbWJkYT6US2JDAgwAlIwOdmFsdWVfc2NoZWR1bGWUhZQpdJRSlH2UKIwLX19wYWNrYWdlX1+UjBhzdGFibGVfYmFzZWxpbmVzMy5jb21tb26UjAhfX25hbWVfX5SMHnN0YWJsZV9iYXNlbGluZXMzLmNvbW1vbi51dGlsc5SMCF9fZmlsZV9flIxtL2hvbWUvbW9vbjNmaXJlL1B5dGhvbi0zLjEwLjAvcHJvamVjdC9neW1fdmVudi9saWIvcHl0aG9uMy4xMC9zaXRlLXBhY2thZ2VzL3N0YWJsZV9iYXNlbGluZXMzL2NvbW1vbi91dGlscy5weZR1Tk5oAIwQX21ha2VfZW1wdHlfY2VsbJSTlClSlIWUdJRSlGgAjBJfZnVuY3Rpb25fc2V0c3RhdGWUk5RoIX2UfZQoaBiMCDxsYW1iZGE+lIwMX19xdWFsbmFtZV9flIwhZ2V0X3NjaGVkdWxlX2ZuLjxsb2NhbHM+LjxsYW1iZGE+lIwPX19hbm5vdGF0aW9uc19flH2UjA5fX2t3ZGVmYXVsdHNfX5ROjAxfX2RlZmF1bHRzX1+UTowKX19tb2R1bGVfX5RoGYwHX19kb2NfX5ROjAtfX2Nsb3N1cmVfX5RoAIwKX21ha2VfY2VsbJSTlGgCKGgHKEsBSwBLAEsBSwFLE0MEiABTAJRoCSmMAV+UhZRoDowEZnVuY5RLhkMCBAGUjAN2YWyUhZQpdJRSlGgVTk5oHSlSlIWUdJRSlGgjaD59lH2UKGgYjARmdW5jlGgnjBljb25zdGFudF9mbi48bG9jYWxzPi5mdW5jlGgpfZRoK05oLE5oLWgZaC5OaC9oMUc/M6kqMFUyYYWUUpSFlIwXX2Nsb3VkcGlja2xlX3N1Ym1vZHVsZXOUXZSMC19fZ2xvYmFsc19flH2UdYaUhlIwhZRSlIWUaEddlGhJfZR1hpSGUjAu"
    },
    "batch_norm_stats": [],
    "batch_norm_stats_target": []
}